import sys
import fileinput

def formatCNF(cnf):
    if type(cnf) is str: # must be a single positive literal
        return ["and", ["or", cnf]]
    elif cnf[0] == "not": # must be a single negative literal
        return ["and", ["or", cnf]]
    elif cnf[0] == "or": # a single clause
        return ["and", cnf]
    else:
        result = ["and"]
        for c in cnf[1:]:
            if type(c) == str:
                result.append(["or", c])
            elif c[0] == "not":
                result.append(["or", c])
            else:
                result.append(c)
        return result

def allTrue(cnf, model): # at least one member of model in each clause
    for clause in cnf[1:]: # skip the "and"
        if len([var for var in clause[1:] if var in model]) == 0:
            return False
    return True

def negateLiterals(model): # returns the compliment of each model literal
    result = []
    for literal in model:
        if type(literal) is str:
            result.append(["not", literal])
        else:
            result.append(literal[1])
    return result

def isAnyClauseFalse(cnf, model): # some clause cannot be satisfied
    modelnegateLiterals = negateLiterals(model)
    for clause in cnf[1:]:
        if len([var for var in clause[1:] if var not in modelnegateLiterals]) == 0:
            return True
    return False

def pureLiteral(cnf, model): # finds 1 pure literal not already in model
    modelnegateLiterals = negateLiterals(model)
    candidates = []
    for clause in cnf[1:]:
        if len([var for var in clause[1:] if var in model]) == 0:
            # clause not yet satisfied by model
            candidates = candidates + [var for var in clause[1:]]
    candidatenegateLiterals = negateLiterals(candidates)
    pure = [var for var in candidates if var not in candidatenegateLiterals]
    for var in pure:
        if var not in model and var not in modelnegateLiterals:
            return var
    return False

def unitPropogation(cnf, model): # finds 1 literal not in model appearing by itself in a clause
    modelnegateLiterals = negateLiterals(model)
    for clause in cnf[1:]:
        remaining = [var for var in clause[1:] if var not in modelnegateLiterals]
        if len(remaining) == 1:
            if remaining[0] not in model:
                return remaining[0]
    return False

def pickVariable(cnf, model): # finds a positive literal not in model or model negateLiterals
    combined = model + negateLiterals(model)
    for clause in cnf[1:]:
        for literal in clause[1:]:
            if type(literal) is str and literal not in combined:
                return literal
    return False

def dpll(cnf):
    #print "starting", formatCNF(cnf)
    return checkConditionsDPLL(formatCNF(cnf), [])

def checkConditionsDPLL(cnf, model):
    if allTrue(cnf, model):
        return model
    if isAnyClauseFalse(cnf, model):
        return False
    pure = pureLiteral(cnf, model)
    if pure:
        return checkConditionsDPLL(cnf, model + [pure])
    unit = unitPropogation(cnf, model)
    if unit:
        return checkConditionsDPLL(cnf, model + [unit])
    pick = pickVariable(cnf, model)
    if pick:
        # try positive
        result = checkConditionsDPLL(cnf, model + [pick])
        if result:
            return result
        else:
            # try negative
            result = checkConditionsDPLL(cnf, model + [['not', pick]])
            if result:
                return result
            else:
                return False

def generateOutput(result):
    if result == False:
        return ["false"]
    else:
        mod = ["true"]
        for v in result:
            if type(v) is str:
                mod.append(v + "=true")
            else:
                mod.append(v[1] + "=false")
        return mod
            
if __name__ == "__main__":
    main_array = [] # array where the new type would be stored
    main_array.append('and')
    with open('days.txt') as f:
        file_content = f.readlines() #reading the file
    file_content = [x.strip() for x in file_content] 
    file_content = file_content[2:len(file_content)] # ignoring the first two lines of the file
    for line in file_content:
        temp_list = ['or']
        line = list(map(int, line.strip().split(' '))) # converting the characters in the line to int
        line = line[0:len(line)-1] # ignoring the zeroes at the end 
        print "The line is:", line
        for char in line:
            print "The char under consideration is:", char
            if char < 0:
                temp_list.append(['not',str(abs(char))]) # if negative adding the NOT and string of abs of the number
                print "The temp list with the recent addition is:", temp_list
            else:
                temp_list.append(str(char)) # if positive just adding the string of the number
                print "The temp list with the recent addition is:", temp_list
        main_array.append(temp_list)
        print "\n"
        print "The main array with the recent addition is:", main_array
    print "\n"
    print "The final main array is:", main_array
    for j in main_array:
        print(j)
    sentences = fileinput.input()
    for l in sentences:
        print repr(dpll(eval(l.strip())))
